# Task ID: 2
# Title: Design and implement database schema
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create the PostgreSQL database schema for patient records, encounters, and system data with proper relationships and constraints.
# Details:
Design database tables for patients (demographics, contact info), encounters (visits, timestamps), vital signs, diagnoses, and treatments. Implement using Diesel migrations in Rust. Create schemas that align with FHIR resource structures where applicable. Include audit tables for tracking changes to medical records. Set up proper indexes for performance optimization. Implement foreign key constraints to maintain data integrity. Document the schema design with entity-relationship diagrams.

# Test Strategy:
Run migrations against a test database. Verify constraints with test data. Ensure schema supports the required queries for patient management and encounter tracking. Test performance with sample data volume.

# Subtasks:
## 1. Design core patient and encounter database tables [pending]
### Dependencies: None
### Description: Create the foundational database tables for patient demographics, contact information, and medical encounters with proper relationships
### Details:
Design and implement the following tables using Diesel migrations in Rust: 1) patients table with fields for demographics (name, DOB, gender, etc.) and contact information (address, phone, email), 2) encounters table for visit records with timestamps, visit type, and patient references, 3) vital_signs table linked to encounters, 4) diagnoses table with ICD codes and encounter references, 5) treatments table with procedure codes and encounter references. Ensure tables align with FHIR resource structures where applicable (particularly Patient and Encounter resources). Create entity-relationship diagrams documenting the core schema design. Implement primary keys, foreign key constraints between related tables, and set up initial indexes for patient lookup.

## 2. Implement audit and tracking functionality [pending]
### Dependencies: 2.1
### Description: Create audit tables and triggers to track all changes to medical records for compliance and history tracking
### Details:
Design and implement audit tables that shadow the core tables created in subtask 1. For each core table (patients, encounters, vital_signs, diagnoses, treatments), create a corresponding audit table that includes all original fields plus metadata columns for: user_id (who made the change), timestamp, operation_type (INSERT/UPDATE/DELETE), and previous_values (for updates). Implement PostgreSQL triggers that automatically populate these audit tables whenever changes occur to the core tables. Write Diesel migrations to create these audit tables and triggers. Document the audit schema and how it relates to the core tables. Test the audit functionality to ensure all changes are properly tracked.

## 3. Optimize database performance and finalize schema [pending]
### Dependencies: 2.1, 2.2
### Description: Implement advanced indexes, constraints, and performance optimizations for the complete database schema
### Details:
Review the schema created in subtasks 1 and 2 and implement performance optimizations: 1) Create additional indexes on frequently queried fields (patient name, encounter dates, diagnosis codes), 2) Implement partial indexes for common query patterns, 3) Add check constraints to ensure data validity (e.g., date ranges, valid code formats), 4) Set up appropriate NOT NULL constraints on required fields, 5) Implement unique constraints where applicable, 6) Create materialized views for complex reporting queries if needed. Perform database query analysis to identify potential bottlenecks. Update the entity-relationship diagrams to reflect the final schema. Document all indexes, constraints, and optimization decisions with explanations of their purpose. Create a final Diesel migration that applies these optimizations to the existing schema.

