# Task ID: 4
# Title: Develop core patient management API
# Status: pending
# Dependencies: 2, 3
# Priority: high
# Description: Implement RESTful API endpoints for CRUD operations on patient records with proper validation and error handling.
# Details:
Create Rust models for patient data matching database schema. Implement RESTful endpoints for creating, reading, updating, and deleting patient records. Add comprehensive data validation for patient information. Implement error handling with appropriate HTTP status codes and error messages. Create search functionality with filtering and pagination. Ensure all operations are properly authorized based on user roles. Implement audit logging for all patient data modifications.

# Test Strategy:
Write unit tests for data validation. Create integration tests for each API endpoint. Test error scenarios and edge cases. Verify authorization rules are enforced correctly. Test search functionality with various parameters.

# Subtasks:
## 1. Create patient data models and database integration [pending]
### Dependencies: None
### Description: Define Rust models for patient data and implement database connectivity with schema validation
### Details:
Create Rust structs representing patient data that align with the database schema. Implement serialization/deserialization using serde. Set up database connection pool and create repository layer for database operations. Define validation rules for patient data fields (e.g., required fields, format validation for phone numbers, emails, etc.). Implement unit tests for model validation logic.

## 2. Implement core CRUD API endpoints with validation [pending]
### Dependencies: 4.1
### Description: Develop RESTful API endpoints for creating, reading, updating and deleting patient records with proper validation
### Details:
Create REST endpoints for: POST /patients (create), GET /patients/{id} (read), PUT /patients/{id} (update), DELETE /patients/{id} (delete), and GET /patients (list). Implement request validation using the models from subtask 1. Add proper error handling with appropriate HTTP status codes (400 for validation errors, 404 for not found, etc.). Return standardized error response objects. Implement pagination for the list endpoint with query parameters for page size and number. Write integration tests for each endpoint.

## 3. Add authorization, search functionality and audit logging [pending]
### Dependencies: 4.2
### Description: Implement role-based access control, advanced search capabilities and audit logging for patient operations
### Details:
Integrate with authentication system to enforce role-based access control (RBAC) for patient operations. Implement search functionality with filtering by various patient attributes (name, date of birth, etc.). Add sorting options to search endpoints. Create audit logging middleware to record all modifications to patient data, including the user who made the change, timestamp, and the specific changes made. Implement proper indexing strategies for efficient search. Add comprehensive documentation for all API endpoints using OpenAPI/Swagger.

