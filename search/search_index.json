{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RustEMR Documentation","text":"<p>Welcome to the RustEMR documentation. This site provides in-depth guides and references based on the README and inspired by OpenEMR and OpenMRS docs.</p> <p>Last updated: 2025-04-21</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Architecture</li> <li>Features</li> <li>Installation</li> <li>Contributing</li> <li>License</li> <li>Contact &amp; Discussions</li> <li>Acknowledgments</li> </ul>"},{"location":"#contact-discussions","title":"Contact &amp; Discussions","text":"<p>For community discussions, questions, and support:</p> <ul> <li>GitHub Discussions: https://github.com/UbudCare/rustemr/discussions</li> </ul>"},{"location":"acknowledgments/","title":"Acknowledgments","text":"<p>RustEMR is inspired by the architectures and feature sets of OpenEMR and OpenMRS, two pioneering open-source EMR systems. We extend our gratitude to their communities for their contributions to open-source healthcare software, which have informed and guided the development of RustEMR.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>RustEMR follows a modular, service-oriented architecture inspired by OpenEMR and OpenMRS to ensure scalability, maintainability, and ease of extension.</p>"},{"location":"architecture/#components","title":"Components","text":"<ul> <li>Backend (Rust): Business logic, data validation, and RESTful/FHIR APIs. Leverages Rust\u2019s safety, performance, and concurrency.</li> <li>Frontend (TypeScript &amp; React): Responsive UI, form rendering, clinical workflows, and administrative dashboards.</li> <li>Database (PostgreSQL): Relational storage of patient, encounter, and system data. Supports migrations and complex queries.</li> <li>Modules &amp; Plugins: </li> <li>OpenEMR-style clinical forms, custom modules, and reporting plugins.</li> <li>OpenMRS-like concept dictionary and module registry for extensions.</li> </ul>"},{"location":"architecture/#data-flow","title":"Data Flow","text":"<ol> <li>User actions in the React UI send HTTP/HTTPS requests.</li> <li>Rust backend routes requests, enforces ACLs, and processes business rules.</li> <li>Data persists in PostgreSQL; FHIR resources are mapped to relational tables.</li> <li>External systems integrate via FHIR-compliant endpoints or REST hooks.</li> </ol>"},{"location":"architecture/#inspiration-from-openemr-openmrs","title":"Inspiration from OpenEMR &amp; OpenMRS","text":"<ul> <li>OpenEMR: Modular form engine, patient dashboard, billing modules.</li> <li>OpenMRS: Concept dictionary, metadata-driven modules, global community plugins.</li> </ul> <p>This architecture allows independent scaling of frontend and backend, hot-swappable modules, and robust integration with external healthcare systems.</p>"},{"location":"contact/","title":"Contact &amp; Discussions","text":"<p>For community discussions, questions, and support:</p> <ul> <li>GitHub Discussions: https://github.com/UbudCare/rustemr/discussions</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome contributions from developers, healthcare professionals, and the broader community.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository on GitHub.</li> <li>Clone your fork and create a feature branch:</li> </ol> <p><code>bash    git clone https://github.com/yourusername/rustemr.git    cd rustemr    git checkout -b feature/your-feature-name</code></p> <ol> <li>Follow coding guidelines:</li> <li>Rust code: <code>cargo fmt</code>, <code>cargo clippy</code>.</li> <li>Frontend: <code>npm run lint</code>.</li> <li> <p>Write tests and ensure they pass (<code>cargo test</code>, <code>npm test</code>).</p> </li> <li> <p>Commit conventions: use Conventional Commits (e.g., <code>feat:</code>, <code>fix:</code>, <code>chore:</code>).</p> </li> <li>Push and open a pull request with clear descriptions and issue references.</li> </ol>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please follow our Code of Conduct to maintain a welcoming community.</p>"},{"location":"features/","title":"Features","text":"<p>RustEMR focuses on core EMR functionalities, inspired by OpenEMR and OpenMRS.</p>"},{"location":"features/#current-features","title":"Current Features","text":"<ul> <li>Basic Patient Management: Create, read, update, and delete (CRUD) patient records, including name, date of birth, and contact information.</li> <li>Encounter Tracking: Record patient visits and capture observations such as vital signs, diagnoses, and treatments.</li> </ul>"},{"location":"features/#roadmap","title":"Roadmap","text":"<ul> <li>Advanced Patient Management</li> <li>Demographics (age, gender, ethnicity)</li> <li>Medical history (conditions, surgeries, allergies)</li> <li>Family and social history</li> <li>Clinical Decision Support</li> <li>Alerts for drug interactions and allergies</li> <li>Clinical guidelines and best practice reminders</li> <li>Billing &amp; Insurance Integration</li> <li>Generate invoices and manage payments</li> <li>Support for insurance claims and reimbursements</li> <li>Reporting &amp; Analytics</li> <li>Customizable reports for patient outcomes, clinic performance, and population health</li> <li>Data visualization tools for healthcare insights</li> <li>Mobile Application Support</li> <li>Responsive design for mobile devices</li> <li>Native mobile apps for iOS and Android (future)</li> <li>Interoperability Enhancements</li> <li>Full FHIR resource support for seamless data exchange</li> <li>Integration with labs, pharmacies, and external services</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>This guide covers setting up RustEMR locally for development and production environments.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Rust (v1.50+): Install from https://www.rust-lang.org/tools/install</li> <li>Node.js (v14+): Install from https://nodejs.org/</li> <li>PostgreSQL (v12+): Install from https://www.postgresql.org/</li> <li>cargo-make (optional): For task automation (<code>cargo install cargo-make</code>).</li> </ul>"},{"location":"installation/#local-development-setup","title":"Local Development Setup","text":"<ol> <li>Clone repository</li> </ol> <p><code>bash    git clone https://github.com/UbudCare/rustemr.git    cd rustemr</code></p> <ol> <li>Database setup</li> </ol> <p><code>bash    psql -U postgres -c \"CREATE DATABASE rustemr;\"    psql -U postgres -c \"CREATE USER rustemr_user WITH PASSWORD 'password';\"    psql -U postgres -c \"GRANT ALL PRIVILEGES ON DATABASE rustemr TO rustemr_user;\"</code></p> <ol> <li>Backend configuration</li> </ol> <p><code>bash    cd backend    cp .env.example .env    # Edit .env with DB credentials    cargo make build    cargo make start</code></p> <ol> <li>Frontend configuration</li> </ol> <p><code>bash    cd ../frontend    npm install    npm run dev</code></p> <ol> <li> <p>Access services</p> </li> <li> <p>Backend API: http://localhost:8080</p> </li> <li>Frontend UI: http://localhost:3000</li> </ol>"},{"location":"installation/#production-deployment","title":"Production Deployment","text":"<p>For production, consider Docker or Kubernetes orchestrations inspired by OpenEMR Docker configurations.</p> <ol> <li>Docker Compose</li> </ol> <p><code>bash    docker-compose up -d</code></p> <ol> <li> <p>Environment</p> </li> <li> <p>Use secure credentials, TLS certificates, and load balancers.</p> </li> <li> <p>Configure PostgreSQL with backups and replication.</p> </li> <li> <p>Monitoring &amp; Logging</p> </li> <li> <p>Integrate Prometheus/Grafana for metrics.</p> </li> <li>Centralize logs with ELK or similar stacks.</li> </ol>"},{"location":"license/","title":"License","text":"<p>RustEMR is licensed under the GNU General Public License v3.0.</p> <p>See the full terms and conditions in the LICENSE file.</p>"}]}